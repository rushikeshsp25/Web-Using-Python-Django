>>> from blog.models import Author

>>> Author.objects.all()
<QuerySet []>

>>> Author.objects.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/rushikesh/djangoStuff/djenv/lib/python3.6/site-packages/django/db/models/manager.py", line 82, in manager_method    return getattr(self.get_queryset(), name)(*args, **kwargs)  File "/home/rushikesh/djangoStuff/djenv/lib/python3.6/site-packages/django/db/models/query.py", line 408, in get
    self.model._meta.object_name
blog.models.Author.DoesNotExist: Author matching query does not exist.

>>> auth1 = Author(full_name = "rushikesh Phalke")
>>> auth1.save()

>>> Author.objects.get(id=1)
<Author: rushikesh Phalke>

>>> Author.objects.all()
<QuerySet [<Author: rushikesh Phalke>]>

>>> auth2 = Author(full_name = "amit Deshwal")
>>> auth2.save()

>>> Author.objects.get(id=2)
<Author: amit Deshwal>

>>> Author.objects.all()
<QuerySet [<Author: rushikesh Phalke>, <Author: amit Deshwal>]>

#qs is for QuerySet
>>> qs = Author.objects.all()
>>> qs
<QuerySet [<Author: rushikesh Phalke>, <Author: amit Deshwal>]>

>>> for auth in qs:
...     print(auth)
... 
rushikesh Phalke
amit Deshwal

>>> for auth in qs:
...     print(auth.full_name)
... 
rushikesh Phalke
amit Deshwal

>>> for auth in qs:
...     print(auth.id)
... 
1
2

>>> auth = Author.objects
>>> auth
<django.db.models.manager.Manager object at 0x7f2a4eb6eb38>

>>> auth = Author.objects.all()
>>> auth
<QuerySet [<Author: rushikesh Phalke>, <Author: amit Deshwal>]>

>>> auth = Author.objects.get(full_name__startswith = 'rus')
>>> auth
<Author: rushikesh Phalke>

>>> auth = Author.objects.get(full_name__endswith = 'rus')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/rushikesh/djangoStuff/djenv/lib/python3.6/site-packages/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/rushikesh/djangoStuff/djenv/lib/python3.6/site-packages/django/db/models/query.py", line 408, in get
    self.model._meta.object_name
blog.models.Author.DoesNotExist: Author matching query does not exist.

>>> auth = Author.objects.get(full_name__endswith = 'ke')
>>> auth
<Author: rushikesh Phalke>

>>> auth = Author.objects.get(full_name__contains = 'ph')
>>> auth
<Author: rushikesh Phalke>

>>> auth = Author.objects.get(full_name__contains = 'pj')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/home/rushikesh/djangoStuff/djenv/lib/python3.6/site-packages/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/home/rushikesh/djangoStuff/djenv/lib/python3.6/site-packages/django/db/models/query.py", line 408, in get
    self.model._meta.object_name
blog.models.Author.DoesNotExist: Author matching query does not exist.
>>> clear()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'clear' is not defined

>>> from datetime import date
>>> from blog.models import Post
>>> post1 = Post(date_posted = date.today(),title = 'Experience of learning Django at VisionWare is cool',content = 'Hell Yah !!',author = Author.objects.get(id=1))
>>> post1
<Post: Experience of learning Django at VisionWare is cool>
>>> post1.save()

##Imp##
# Author objects get API access to Post objects
>>> auth1.post_set.all()
<QuerySet [<Post: Experience of learning Django at VisionWare is cool>]>

>>> auth1.post_set
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7f2a4eb92a58>

##Imp##
#The API follows relationships as far as you need, performing efficient
# JOINs for you behind the scenes.
# This finds all articles by a author whose name starts with "John"
>>> post = Post.objects.filter(author__full_name__startswith = "rushi")
>>> post
<Post: Experience of learning Django at VisionWare is cool>
>>> 